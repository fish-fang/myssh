<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="/struts-tags" prefix="s" %>
<!--
  $Id: monitor.html,v 1.16 2011-04-28 15:31:10 gaudenz Exp $
  Copyright (c) 2006-2010, JGraph Ltd
  
  Monitor example for mxGraph. This eample demonstrates using a
  graph to display the current state of a workflow.
-->
<html>
<head>
	<title>mxGraph Workflow Monitor</title>

	<!-- Sets the basepath for the library if not in same directory -->
	<script type="text/javascript">
		mxBasePath = '../src';
	</script>

	<!-- Loads and initializes the library -->
	<script type="text/javascript" src="../src/js/mxClient.js"></script>

	<!-- Example code -->
	<script type="text/javascript">
		// Program starts here. Creates a sample graph in the
		// DOM node with the specified ID. This function is invoked
		// from the onLoad event handler of the document (see below).
		
		function main(container)
		{
			
			var xmlstr = document.getElementById("xmlf");
			
			// Checks if the browser is supported
			if (!mxClient.isBrowserSupported())
			{
				// Displays an error message if the browser is not supported.
				mxUtils.error('Browser is not supported!', 200, false);
			}
			else
			{
				// Creates the graph inside the given container
				var graph = createGraph(container);
				graph.setHtmlLabels(true);


				graph.addListener(mxEvent.DOUBLE_CLICK, function(sender, evt)
				{
					var cell = evt.getProperty('cell');
					alert(cell.value);	
                    if(cell.id == 3){
                        if(mxUtils.confirm("create a process")){
                            window.location.href="swimlanes.html";
                        }                        
                        evt.consume();
                    }	
					
					
				});
				var parent = graph.getDefaultParent();
				try{
					// Creates a process display using the activity names as IDs to refer to the elements
					var req = mxUtils.load("firstflow.xml");
					
					var root = req.getDocumentElement();
					var dec = new mxCodec(root.ownerDocument);
					dec.decode(root, graph.getModel());
				} finally{
					graph.getModel().endUpdate();
				}

				
			}
		};

		/**
		 * Updates the display of the given graph using the XML data
		 */
		function update(graph, xml)
		{
			if (xml != null &&
				xml.length > 0)
			{
				var doc = mxUtils.parseXml(xml);
				
				if (doc != null &&
					doc.documentElement != null)
				{
					var model = graph.getModel();
					var nodes = doc.documentElement.getElementsByTagName('update');
					
					if (nodes != null &&
						nodes.length > 0)
					{
					
						model.beginUpdate();
						try
						{
							for (var i = 0; i < nodes.length; i++)
							{
								// Processes the activity nodes inside the process node
								var id = nodes[i].getAttribute('id');
								var state = nodes[i].getAttribute('state');
								
								// Gets the cell for the given activity name from the model
								var cell = model.getCell(id);
								
								
								// Updates the cell color and adds some tooltip information
								if (cell != null)
								{
									// Resets the fillcolor and the overlay
									graph.setCellStyles(mxConstants.STYLE_FILLCOLOR, 'white', [cell]);
									graph.removeCellOverlays(cell);
			
									// Changes the cell color for the known states
									if (state == 'Running')
									{
										graph.setCellStyles(mxConstants.STYLE_FILLCOLOR, '#2DFF2C', [cell]);
									}
									else if (state == 'Waiting')
									{
										graph.setCellStyles(mxConstants.STYLE_FILLCOLOR, '#FFAF1B', [cell]);
									}
									else if (state == 'Completed')
									{
										graph.setCellStyles(mxConstants.STYLE_FILLCOLOR, '#FFFF10', [cell]);
									}
									
									// Adds tooltip information using an overlay icon
									if (state != 'Init')
									{
										// Sets the overlay for the cell in the graph
										graph.addCellOverlay(cell, createOverlay(graph.warningImage, 'State: '+state));
									}
								}
							} // for
						}
						finally
						{
							model.endUpdate();
						}
						graph.setEnabled(false);
						graph.getSelectionCell();
						var cell;  
						graph.addListener(mxEvent.CLICK, function(sender, evt)  
						{  
							alert("sss");
						 cell= evt.getProperty('cell');  
						 selectionChanged(graph,cell);  
						 
						   
						});  
						  
						selectionChanged(graph,cell);
					}
				}
			}
		};
		
		/**
		 * Creates an overlay object using the given tooltip and text for the alert window
		 * which is being displayed on click.
		 */
		function createOverlay(image, tooltip)
		{
			var overlay = new mxCellOverlay(image, tooltip);

			// Installs a handler for clicks on the overlay
			overlay.addListener(mxEvent.CLICK, function(sender, evt)
			{
				mxUtils.alert(tooltip+'\n'+'Last update: '+new Date());
			});
			
			return overlay;
		};
		
		/**
		 * Creates and returns an empty graph inside the given container.
		 */
		function createGraph(container)
		{
			var graph = new mxGraph(container);
			graph.setTooltips(true);
			graph.setEnabled(false);
			var style = new Object();
			style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_IMAGE;
	style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;
	style[mxConstants.STYLE_IMAGE] = 'images/Worker1_128x128.png';
	style[mxConstants.STYLE_IMAGE_WIDTH] = '180';
	style[mxConstants.STYLE_IMAGE_HEIGHT] = '180';
	style[mxConstants.STYLE_FONTCOLOR] = '#000000';
	style[mxConstants.STYLE_VERTICAL_LABEL_POSITION] = mxConstants.ALIGN_CENTER;
	graph.getStylesheet().putCellStyle('member', style);
var style = new Object();
	style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_IMAGE;
	style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;
	style[mxConstants.STYLE_IMAGE] = 'images/Suit1_128x128.png';
	style[mxConstants.STYLE_IMAGE_WIDTH] = '180';
	style[mxConstants.STYLE_IMAGE_HEIGHT] = '180';
	style[mxConstants.STYLE_FONTCOLOR] = '#000000';
	style[mxConstants.STYLE_VERTICAL_LABEL_POSITION] = mxConstants.ALIGN_CENTER;
	graph.getStylesheet().putCellStyle('manager', style);		// Disables folding
var style = new Object();
	style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RHOMBUS;
			style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RhombusPerimeter;
			style[mxConstants.STYLE_STROKECOLOR] = 'gray';
			style[mxConstants.STYLE_FONTCOLOR] = 'gray';
			style[mxConstants.STYLE_FILLCOLOR] = '#91BCC0';
			style[mxConstants.STYLE_GRADIENTCOLOR] = 'white';
			style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;
			style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;
			style[mxConstants.STYLE_FONTSIZE] = '14';
			graph.getStylesheet().putCellStyle('swimlane', style);
			graph.isCellFoldable = function(cell, collapse)
			{
				return false;
			};

			
			return graph;
		};
		
		/**
		 * Returns a random state.
		 */
		function getState()
		{
			var state = 'Init';
			var rnd = Math.random() * 4;
			
			if (rnd > 3)
			{
				state = 'Completed';
			}
			else if (rnd > 2)
			{
				state = 'Running';
			}
			else if (rnd > 1)
			{
				state = 'Waiting';
			}
			
			return state;
		};
	</script>
</head>

<!-- Page passes the container and control to the main function -->
<s:textfield id="xmlf" name="xmlstr"/>

<body onload="main(document.getElementById('graphContainer'));">
	<!-- Acts as a container for the graph -->
	<div id="graphContainer" style="overflow:hidden;width:861px;height:401px;">
	</div>
	<br>
</body>
</html>
